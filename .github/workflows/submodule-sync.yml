# Inspired by https://stackoverflow.com/a/67059629/9969672
name: "Submodules Sync"

on:
  # Allows you to run this workflow manually from the Actions tab or through HTTP API
  workflow_dispatch:
    inputs:
      updateBranchName:
        description: "Branch to update OpenAPI specs"
        type: string
        default: "update-sevdesk-api"

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    name: "Submodules Sync"
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    outputs:
      commit_update: ${{ steps.commit_update.outcome }}
      commit_msg: ${{ steps.build_commit_message.outputs.MSG }}
      current_version: ${{ steps.build_commit_message.outputs.CURRENT_VERSION }}
      new_version: ${{ steps.build_commit_message.outputs.NEW_VERSION }}
      is_new_version: ${{ steps.build_commit_message.outputs.IS_NEW_VERSION }}
    env:
      UPDATE_BRANCH_NAME: ${{ inputs.updateBranchName || vars.UPDATE_BRANCH_NAME || 'update-sevdesk-api' }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref }}

      - name: Prepare git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Checkout update branch
        run: |
          git fetch
          git switch ${{env.UPDATE_BRANCH_NAME}} 2>/dev/null || git switch -c ${{env.UPDATE_BRANCH_NAME}}
          git rebase "${{ github.ref_name}}" "${{env.UPDATE_BRANCH_NAME}}"

      # Update references
      - name: Git Submodule Update
        run: |
          git pull origin "${{ github.ref_name }}" --recurse-submodules
          git submodule update --remote --recursive

      - name: Build commit message
        id: build_commit_message
        run: |
          MSG=$(cd sevdesk-api && git log -1 --pretty=%B)
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          NEW_VERSION=$(cd sevdesk-api && git describe --tags --abbrev=0)
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            echo "Bumping from $CURRENT_VERSION to $NEW_VERSION"
            MSG=$"${MSG}\n\nRelease-As: ${NEW_VERSION}"
            echo "IS_NEW_VERSION=true" >> "$GITHUB_OUTPUT"
          else
            echo "IS_NEW_VERSION=false" >> "$GITHUB_OUTPUT"
          fi

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "MSG<<EOF" >> "$GITHUB_OUTPUT"
          echo "$MSG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo -e "$MSG"
      - name: Commit update
        id: commit_update
        env:
          MSG: ${{ steps.build_commit_message.outputs.MSG }}
        run: |
          git commit -am "$MSG"
        continue-on-error: true

      - name: push branch
        if: steps.commit_update.outcome == 'success'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push --set-upstream origin ${{env.UPDATE_BRANCH_NAME}}
          # Don't fail the build if the PR already exists
          gh pr create --base ${{ github.ref_name}} --head ${{env.UPDATE_BRANCH_NAME}} --label "update: sevdesk-api" --fill || true
      - name: Comment on failed update
        if: steps.commit_update.outcome == 'failure'
        run: |
          echo "No changes detected in the submodules."

  generate_code:
    name: Generate Code
    needs: sync
    if: needs.sync.outputs.commit_update == 'success'
    uses: ./.github/workflows/generate.yml
    with:
      repository: ${{ github.repository }}
      ref: ${{ inputs.updateBranchName || vars.UPDATE_BRANCH_NAME || 'update-sevdesk-api' }}

  merge:
    name: "Auto-Merge Update"
    runs-on: ubuntu-latest
    needs: [sync, generate_code]
    if: needs.sync.outputs.commit_update == 'success'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      UPDATE_BRANCH_NAME: ${{ inputs.updateBranchName || vars.UPDATE_BRANCH_NAME || 'update-sevdesk-api' }}

    steps:
      - name: Auto-merge update
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge "${{ env.UPDATE_BRANCH_NAME }}" --auto --squash --repo "${{ github.repository }}"

  release_please:
    name: Create new Release
    needs: sync
    if: needs.sync.outputs.commit_update == 'success' && needs.sync.outputs.is_new_version == 'true'
    uses: ./.github/workflows/release-please.yml
